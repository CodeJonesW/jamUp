[{"/Users/thegoods/Development/jamUpReact/jamup/src/index.js":"1","/Users/thegoods/Development/jamUpReact/jamup/src/App.js":"2","/Users/thegoods/Development/jamUpReact/jamup/src/global.js":"3","/Users/thegoods/Development/jamUpReact/jamup/src/theme.js":"4","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Dashboard.js":"5","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Jam.js":"6","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/JamContainer.js":"7","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/PrimaryBar.js":"8","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/SideMenu.js":"9","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignIn.js":"10","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignUp.js":"11","/Users/thegoods/Development/jamUpReact/jamup/src/Hooks/use-auth.js":"12","/Users/thegoods/Development/jamUpReact/jamup/src/utils/jamAPI.js":"13","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/infoHeader.js":"14","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/profile.js":"15","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Profile.js":"16","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/About.js":"17"},{"size":426,"mtime":1612238048410,"results":"18","hashOfConfig":"19"},{"size":1306,"mtime":1613276540396,"results":"20","hashOfConfig":"19"},{"size":658,"mtime":1613276132072,"results":"21","hashOfConfig":"19"},{"size":133,"mtime":1611507660777,"results":"22","hashOfConfig":"19"},{"size":11341,"mtime":1613688810496,"results":"23","hashOfConfig":"19"},{"size":2066,"mtime":1613679554192,"results":"24","hashOfConfig":"19"},{"size":2614,"mtime":1613679576520,"results":"25","hashOfConfig":"19"},{"size":5992,"mtime":1613681260295,"results":"26","hashOfConfig":"19"},{"size":2158,"mtime":1613679603328,"results":"27","hashOfConfig":"19"},{"size":2031,"mtime":1613679744923,"results":"28","hashOfConfig":"19"},{"size":1989,"mtime":1613679705247,"results":"29","hashOfConfig":"19"},{"size":2857,"mtime":1612236248932,"results":"30","hashOfConfig":"19"},{"size":3731,"mtime":1613684231223,"results":"31","hashOfConfig":"19"},{"size":1636,"mtime":1613679644760,"results":"32","hashOfConfig":"19"},{"size":152,"mtime":1613196540041,"results":"33","hashOfConfig":"19"},{"size":152,"mtime":1613196540041,"results":"34","hashOfConfig":"19"},{"size":4841,"mtime":1613681764984,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"l4gjh",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/thegoods/Development/jamUpReact/jamup/src/index.js",[],["72","73"],"/Users/thegoods/Development/jamUpReact/jamup/src/App.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/global.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/theme.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Dashboard.js",["74","75","76"],"import React, { useState, useEffect, useRef } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport InfoHeader from './infoHeader'\nimport PrimarySearchAppBar from './PrimaryBar'\nimport JamContainer from './JamContainer'\nimport SideMenu from './SideMenu'\nimport { useAuth } from \"../../Hooks/use-auth\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport jamCalls from '../../utils/jamAPI'\n\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    color: \"black\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n}));\n\nconst Dashboard = (props) => {\n    const auth = useAuth();\n    const classes = useStyles();\n    const [loggedInUserId, setUserId] = useState(null)\n\n  // load in all jams on page\n  const [jamData, setJams] = useState(\"\");\n    useEffect( () => {\n      // using set timeout to allow time for firebase and my db to create user so that \n      // we can grab the user by uid\n      setTimeout(function(){\n\n        jamCalls.getUserByUid(auth.user.uid)\n        .then((data) => {\n          if(data.msg){\n            auth.signout()\n          }\n          console.log(data)\n          // console.log(\"here\", data.userInfo[0].id)\n          setUserId(data.userInfo[0].id)\n          jamCalls.findUserFavoriteJams(data.userInfo[0].id)\n          .then((userFavoriteJamData) => {\n          setUserFavoriteJams(userFavoriteJamData.userFavoriteJams)\n\n        })\n      }, 1000);\n      \n      })\n     \n      jamCalls.getAllJams()\n      .then(data => {\n        setJams(data.allJams)\n      })\n\n\n     \n    }, []);\n\n\n// --------------------------------------------------\n// FILTER JAMS KEYWORDS (SEARCH)\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredJams, setFilteredJams] = useState(\"\");\n  const [jamsToSearch, setJamsToSearch] = useState(\"\");\n    // refactor to use DB\n    useEffect(() => {\n      // if the search term does not exist grab the jams by page via get all jams\n      // set the two states involving search to false so that correct data renders\n      // and return\n      if(!searchTerm) {\n          jamCalls.getAllJams()\n          .then(data => {\n          setJamsToSearch(false)\n          setFilteredJams(false)\n          setJams(data.allJams)\n          return\n        })\n      } else {\n        // otherwise grab all the grabs from the db and set to state\n        // jams to search\n        jamCalls.getAllJamsForSearch()\n        .then(data => {\n          setJamsToSearch(data.allJams)\n\n        });\n\n      // if this state has been populated there is a current search term\n      if(jamsToSearch){\n        // filter results\n        const results = jamsToSearch.filter(jam =>\n          jam.title.toLowerCase().includes(searchTerm)\n        );\n        setFilteredJams(results);\n        // the existence of this ^ state will trigger a rendering of different data in the \n        // jam container\n      }\n  \n      } \n\n    }, [searchTerm]);\n  \n    // this runs onchange in search filtering jams\n    const handleJamSearch = (e) => {\n      setSearchTerm(e.target.value);\n    }\n\n\n\n// -------------------------------------------------------------\n// POST NEW JAM\n    // --------------------------------------------------\n    // state and useEffect for when posting new jam\n    const [postedJam, setJam] = useState('')\n    useEffect(() => {\n    // if posted jam changes repopulate state with all previous + new   \n        if(postedJam){\n          // console.log('newjam', postedJam)\n          jamData.pop()\n          setJams([postedJam, ...jamData])\n        }\n        \n      }, [postedJam]);\n\n\n      const handlePost = (e) => {\n        // console.log(e)\n        // data from new jam form\n        // post to server\n        if(!jamDate.current.value || !jamTime.current.value) {\n          alert(\"Jams must have a date and time\")\n          return\n        }\n        let newJam = {\n          title: jamTitleInput.current.value,\n          genre: jamGenreInput.current.value,\n          info: jamInfoInput.current.value,\n          jamDate: jamDate.current.value,\n          jamTime: jamTime.current.value,\n          location: jamLocation.current.value,\n          userId: loggedInUserId\n        }\n\n     \n        \n        \n          jamCalls.postJam(newJam)\n          .then((data) => {\n            // changing jamDate to hold utc so correct time is displayed immediately after post\n            const d = new Date(newJam.jamDate + \"T\" + newJam.jamTime);\n            const newUtcDate = d.toUTCString();\n            newJam.jamDate = newUtcDate\n            // grab new jam id and append it to the jam about to be posted to state\n            newJam.id = data.createdJamId\n             // set new jam state\n            setJam(newJam)\n            // turn off modal\n            togglePostModal()\n          })\n    \n        }\n    \n\n        // state for post new jam via modal\n        const [open, setOpen] = useState(false);\n\n        // modal open and close functions\n        const togglePostModal = () => {\n          setOpen(!open);\n        };\n        \n\n        // add new refs for new inputs time date location\n        const jamTitleInput = useRef(null);\n        const jamGenreInput = useRef(null);\n        const jamInfoInput = useRef(null);\n        const jamTime = useRef(null);\n        const jamDate = useRef(null);\n        const jamLocation = useRef(null);\n        // html for  post modal\n        const body = (\n          <div className={classes.paper}>\n            <h2 id=\"simple-modal-title\">Create a New Jam</h2>\n            <input ref={jamTitleInput} placeholder=\"Jam Title\"/>\n            <input ref={jamInfoInput} placeholder=\"Info\"/>\n            <input ref={jamGenreInput} placeholder=\"Genre\"/>\n            <input ref={jamTime}type=\"time\"/>\n            <input ref={jamDate}type=\"date\"/>\n            <input ref={jamLocation} placeholder=\"Location\"></input>\n            <button onClick={(e) => handlePost(e)}>Create Jam</button>\n          </div>\n        );\n\n\n\n\n\n// ----------------------------------------------------------\n// POST/TOGGLE FAVORITE JAM\n\n            const postFavoriteJam = (e) => {\n              let likedJamId = e.currentTarget.dataset.jamid\n              console.log(e.currentTarget)\n              console.log(e.currentTarget.dataset.jamid)\n              jamCalls.postFavoriteJam(likedJamId, loggedInUserId).then((data) => {\n                console.log(data)\n                setUserFavoriteJams(data.userFavoriteJams)\n                alert(data.msg)\n\n              }) \n            }\n\n\n// --------------------------------------------------------------\n// Delete User's Jam\n\n            const handleDeleteJam = (e) => {\n              let jamIdToDelete = e.currentTarget.dataset.jamid\n              let answer = window.confirm(\"Are you sure you want to delete this jam?\")\n              if (answer) {\n                jamCalls.deleteJamById(jamIdToDelete, loggedInUserId, pageNumber)\n                .then(data => {\n                  setJams(data.allJams)\n                })\n                \n              } else {\n                return\n              }\n\n            }\n\n// --------------------------------------------------------------\n// FILTER FOR USERS FAVORITES\n            const [displayFavorites, toggleDisplayFavorites] = useState(false)\n            const [userFavoriteJams, setUserFavoriteJams] = useState(null)\n            useEffect(() => {\n              // console.log(\"User Favorite Jams: \",userFavoriteJams)\n            }, [userFavoriteJams])\n\n            const handleShowFavorites = async () => {\n              toggleDisplayFavorites(!displayFavorites)\n              let data = await jamCalls.findUserFavoriteJams(loggedInUserId)\n                // console.log(data, displayFavorites)\n                setUserFavoriteJams(data.userFavoriteJams)\n                \n            }\n\n            useEffect(() => {\n              // console.log(displayFavorites)\n            }, [displayFavorites]);\n\n\n// ---------------------------------------------------\n// Handle Learn More Modal\n// modal to come\n       \n        const handleLearnMore = (e, props) => {\n          console.log(e.currentTarget)\n          console.log(props)\n          jamCalls.findUsersWhoFavoritedJam(props.id)\n          .then((data) => {\n            console.log(\"users who like jam\", data.usersWhoFavoriteJamId)\n            alert(`Currently, ${data.usersWhoFavoriteJamId.length} musicians are attending this jam`)\n            \n          })\n        }\n\n\n// ------------------------------------------------------\n// Handle Pages of Jams\n        const [pageNumber, setPageNumber] = useState(0)\n\n        const handleNextPage = () => {\n          if(jamData.length < 4) {\n            alert(\"No more jams\")\n            return\n          }\n          console.log(\"Page number is \", pageNumber, \"currently. about to Increase by 4\")\n          setPageNumber(pageNumber + 4)\n        }\n\n        const handlePreviousPage = () => {\n          if(pageNumber === 0){\n            alert(\"No previous jams\")\n            return\n          }\n          console.log(\"Page number is \", pageNumber, \"currently. about to Increase by 4\")\n          setPageNumber(pageNumber - 4)\n        }\n\n        useEffect(() => {\n          // console.log(\"page increase\")\n\n          // if display favorites is true adjust a new state for \n          // Favorites Page number and implementpagination\n          jamCalls.getAllJams(pageNumber)\n          .then(data => {\n            setJams(data.allJams)\n          })\n        }, [pageNumber])\n\n       \n\n    return (\n        <div>\n            {/* APP BAR AND BUTTONS BELOW  */}\n            <PrimarySearchAppBar handleJamSearch={handleJamSearch}></PrimarySearchAppBar>\n            <SideMenu displayFavorites={displayFavorites} handlePreviousPage={handlePreviousPage} handleNextPage={handleNextPage} handleShowFavorites={handleShowFavorites} togglePostModal={togglePostModal} handlePost={handlePost}/>\n            {/* ------------------------------------------------------------ */}\n            <InfoHeader pageNumber={pageNumber} displayFavoritesStatus={displayFavorites}/>\n            {/* POST NEW JAM MODAL */}\n            <Modal\n              open={open}\n              onClose={togglePostModal}\n              className={classes.modal}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                {body}\n              </Fade>\n            \n            </Modal>\n            {/* LEARN MORE MODAL */}\n            \n            {/* CONTAINER OF AVALIABLE JAMS */}\n            \n            <JamContainer handleLearnMore={handleLearnMore} handleDeleteJam={handleDeleteJam} loggedInUserId={loggedInUserId} displayFavorites={displayFavorites} userFavoriteJams={userFavoriteJams} postFavoriteJam={postFavoriteJam} jamData={jamData} filteredJams={filteredJams}/>\n        </div>\n      \n    )\n   \n    \n    \n};\n\n\nexport default Dashboard;","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Jam.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/JamContainer.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/PrimaryBar.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/SideMenu.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignIn.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignUp.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/Hooks/use-auth.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/utils/jamAPI.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/infoHeader.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/profile.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Profile.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/About.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":67,"column":8,"nodeType":"83","endLine":67,"endColumn":10,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":111,"column":8,"nodeType":"83","endLine":111,"endColumn":20,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"87","line":133,"column":10,"nodeType":"83","endLine":133,"endColumn":21,"suggestions":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["91"],"React Hook useEffect has a missing dependency: 'jamsToSearch'. Either include it or remove the dependency array.",["92"],"React Hook useEffect has a missing dependency: 'jamData'. Either include it or remove the dependency array. You can also do a functional update 'setJams(j => ...)' if you only need 'jamData' in the 'setJams' call.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [auth]",{"range":"100","text":"101"},"Update the dependencies array to be: [jamsToSearch, searchTerm]",{"range":"102","text":"103"},"Update the dependencies array to be: [jamData, postedJam]",{"range":"104","text":"105"},[1869,1871],"[auth]",[3215,3227],"[jamsToSearch, searchTerm]",[3862,3873],"[jamData, postedJam]"]