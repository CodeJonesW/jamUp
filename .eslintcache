[{"/Users/thegoods/Development/jamUpReact/jamup/src/index.js":"1","/Users/thegoods/Development/jamUpReact/jamup/src/App.js":"2","/Users/thegoods/Development/jamUpReact/jamup/src/global.js":"3","/Users/thegoods/Development/jamUpReact/jamup/src/theme.js":"4","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Dashboard.js":"5","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Jam.js":"6","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/JamContainer.js":"7","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/PrimaryBar.js":"8","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/SideMenu.js":"9","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignUp.js":"10","/Users/thegoods/Development/jamUpReact/jamup/src/Hooks/use-auth.js":"11","/Users/thegoods/Development/jamUpReact/jamup/src/utils/jamAPI.js":"12","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/infoHeader.js":"13","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/profile.js":"14","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Profile.js":"15","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/Landing.js":"16","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignIn.js":"17","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/FAQ.js":"18","/Users/thegoods/Development/jamUpReact/jamup/src/assets/FAQ/FAQuestions.js":"19","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/FAQPage.js":"20"},{"size":426,"mtime":1612238048410,"results":"21","hashOfConfig":"22"},{"size":1926,"mtime":1615939747476,"results":"23","hashOfConfig":"22"},{"size":658,"mtime":1615171427245,"results":"24","hashOfConfig":"22"},{"size":133,"mtime":1611507660777,"results":"25","hashOfConfig":"22"},{"size":10634,"mtime":1615939776221,"results":"26","hashOfConfig":"22"},{"size":2370,"mtime":1614560750086,"results":"27","hashOfConfig":"22"},{"size":2635,"mtime":1614796490236,"results":"28","hashOfConfig":"22"},{"size":5990,"mtime":1615938982269,"results":"29","hashOfConfig":"22"},{"size":2158,"mtime":1613679603328,"results":"30","hashOfConfig":"22"},{"size":3831,"mtime":1615415285557,"results":"31","hashOfConfig":"22"},{"size":2857,"mtime":1612236248932,"results":"32","hashOfConfig":"22"},{"size":3731,"mtime":1615395973073,"results":"33","hashOfConfig":"22"},{"size":1636,"mtime":1613679644760,"results":"34","hashOfConfig":"22"},{"size":152,"mtime":1613196540041,"results":"35","hashOfConfig":"36"},{"size":152,"mtime":1613196540041,"results":"37","hashOfConfig":"22"},{"size":5981,"mtime":1615938808760,"results":"38","hashOfConfig":"22"},{"size":3195,"mtime":1615394177012,"results":"39","hashOfConfig":"22"},{"size":230,"mtime":1615938011762,"results":"40","hashOfConfig":"22"},{"size":1863,"mtime":1615940055857,"results":"41","hashOfConfig":"22"},{"size":1563,"mtime":1615939729041,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"14mt8q4",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l4gjh",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/Users/thegoods/Development/jamUpReact/jamup/src/index.js",[],["87","88"],"/Users/thegoods/Development/jamUpReact/jamup/src/App.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/global.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/theme.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Dashboard.js",["89","90","91","92"],"import React, { useState, useEffect, useRef } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport InfoHeader from \"./infoHeader\";\nimport PrimarySearchAppBar from \"./PrimaryBar\";\nimport JamContainer from \"./JamContainer\";\nimport SideMenu from \"./SideMenu\";\nimport { useAuth } from \"../../Hooks/use-auth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport jamCalls from \"../../utils/jamAPI\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    color: \"black\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n\nconst Dashboard = (props) => {\n  const auth = useAuth();\n  const classes = useStyles();\n  const [loggedInUserId, setUserId] = useState(null);\n\n  // load in all jams on page\n  const [jamData, setJams] = useState(\"\");\n  useEffect(async () => {\n    async function fetchData() {\n      // await for DB to process\n      await timeout(3000);\n      // console.log(auth.user)\n      jamCalls.getUserByUid(auth.user.uid).then((data) => {\n        // console.log(\"HERE\", data)\n        if (data.msg) {\n          auth.signout();\n          return;\n        }\n        // console.log(loggedInUserId)\n        setUserId(data.userInfo[0].id);\n        jamCalls\n          .findUserFavoriteJams(data.userInfo[0].id)\n          .then((userFavoriteJamData) => {\n            // console.log(\"HERE\", userFavoriteJamData)\n            setUserFavoriteJams(userFavoriteJamData.userFavoriteJams);\n          });\n      });\n    }\n\n    fetchData();\n\n    jamCalls.getAllJams().then((data) => {\n      setJams(data.allJams);\n    });\n  }, []);\n\n  function timeout(delay) {\n    return new Promise((res) => setTimeout(res, delay));\n  }\n\n  // --------------------------------------------------\n  // FILTER JAMS KEYWORDS (SEARCH)\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredJams, setFilteredJams] = useState(\"\");\n  const [jamsToSearch, setJamsToSearch] = useState(\"\");\n  // refactor to use DB\n  useEffect(() => {\n    // if the search term does not exist grab the jams by page via get all jams\n    // set the two states involving search to false so that correct data renders\n    // and return\n    if (!searchTerm) {\n      jamCalls.getAllJams().then((data) => {\n        setJamsToSearch(false);\n        setFilteredJams(false);\n        setJams(data.allJams);\n        return;\n      });\n    } else {\n      // otherwise grab all the grabs from the db and set to state\n      // jams to search\n      jamCalls.getAllJamsForSearch().then((data) => {\n        setJamsToSearch(data.allJams);\n      });\n\n      // if this state has been populated there is a current search term\n      if (jamsToSearch) {\n        // filter results\n        const results = jamsToSearch.filter((jam) =>\n          jam.title.toLowerCase().includes(searchTerm)\n        );\n        setFilteredJams(results);\n        // the existence of this ^ state will trigger a rendering of different data in the\n        // jam container\n      }\n    }\n  }, [searchTerm]);\n\n  // this runs onchange in search filtering jams\n  const handleJamSearch = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  // -------------------------------------------------------------\n  // POST NEW JAM\n  // --------------------------------------------------\n  // state and useEffect for when posting new jam\n  const [postedJam, setJam] = useState(\"\");\n  useEffect(() => {\n    // if posted jam changes repopulate state with all previous + new\n    if (postedJam) {\n      // console.log('newjam', postedJam)\n      setJams([postedJam, ...jamData]);\n    }\n  }, [postedJam]);\n\n  const handlePost = (e) => {\n    // console.log(e)\n    // data from new jam form\n    // post to server\n    if (!jamDate.current.value || !jamTime.current.value) {\n      alert(\"Jams must have a date and time\");\n      return;\n    }\n    // console.log(loggedInUserId)\n    let newJam = {\n      title: jamTitleInput.current.value,\n      genre: jamGenreInput.current.value,\n      info: jamInfoInput.current.value,\n      jamDate: jamDate.current.value,\n      jamTime: jamTime.current.value,\n      location: jamLocation.current.value,\n      userId: loggedInUserId,\n    };\n\n    jamCalls.postJam(newJam).then((data) => {\n      // console.log(data)\n      // changing jamDate to hold utc so correct time is displayed immediately after post\n      const d = new Date(newJam.jamDate + \"T\" + newJam.jamTime);\n      const newUtcDate = d.toUTCString();\n      newJam.jamDate = newUtcDate;\n      // grab new jam id and append it to the jam about to be posted to state\n      newJam.id = data.createdJamId;\n      // set new jam state\n      setJam(newJam);\n      // turn off modal\n      togglePostModal();\n    });\n  };\n\n  // state for post new jam via modal\n  const [open, setOpen] = useState(false);\n\n  // modal open and close functions\n  const togglePostModal = () => {\n    setOpen(!open);\n  };\n\n  // add new refs for new inputs time date location\n  const jamTitleInput = useRef(null);\n  const jamGenreInput = useRef(null);\n  const jamInfoInput = useRef(null);\n  const jamTime = useRef(null);\n  const jamDate = useRef(null);\n  const jamLocation = useRef(null);\n  // html for  post modal\n  const body = (\n    <div className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Create a New Jam</h2>\n      <input ref={jamTitleInput} placeholder=\"Jam Title\" />\n      <input ref={jamInfoInput} placeholder=\"Info\" />\n      <input ref={jamGenreInput} placeholder=\"Genre\" />\n      <input ref={jamTime} type=\"time\" />\n      <input ref={jamDate} type=\"date\" />\n      <input ref={jamLocation} placeholder=\"Location\"></input>\n      <button onClick={(e) => handlePost(e)}>Create Jam</button>\n    </div>\n  );\n\n  // ----------------------------------------------------------\n  // POST/TOGGLE FAVORITE JAM\n\n  const postFavoriteJam = (e) => {\n    let likedJamId = e.currentTarget.dataset.jamid;\n    // console.log(e.currentTarget)\n    // console.log(e.currentTarget.dataset.jamid)\n    // console.log(loggedInUserId)\n    jamCalls.postFavoriteJam(likedJamId, loggedInUserId).then((data) => {\n      console.log(data);\n      setUserFavoriteJams(data.userFavoriteJams);\n      alert(data.msg);\n    });\n  };\n\n  // --------------------------------------------------------------\n  // Delete User's Jam\n\n  const handleDeleteJam = (e) => {\n    // console.log(e.currentTarget)\n    let jamIdToDelete = e.currentTarget.dataset.jamid;\n    // console.log(jamIdToDelete)\n    let answer = window.confirm(\"Are you sure you want to delete this jam?\");\n    if (answer) {\n      jamCalls\n        .deleteJamById(jamIdToDelete, loggedInUserId, pageNumber)\n        .then((data) => {\n          // console.log(data)\n          setJams(data.allJams);\n        });\n    } else {\n      return;\n    }\n  };\n\n  // --------------------------------------------------------------\n  // FILTER FOR USERS FAVORITES\n  const [displayFavorites, toggleDisplayFavorites] = useState(false);\n  const [userFavoriteJams, setUserFavoriteJams] = useState([]);\n  useEffect(() => {\n    // console.log(\"User Favorite Jams: \",userFavoriteJams)\n  }, [userFavoriteJams]);\n\n  const handleShowFavorites = async () => {\n    toggleDisplayFavorites(!displayFavorites);\n    let data = await jamCalls.findUserFavoriteJams(loggedInUserId);\n\n    // console.log(data, displayFavorites)\n    setUserFavoriteJams(data.userFavoriteJams);\n  };\n\n  useEffect(() => {\n    // console.log(displayFavorites)\n    // console.log(userFavoriteJams)\n  }, [displayFavorites]);\n\n  // ---------------------------------------------------\n  // Handle Learn More Modal\n  // modal to come\n\n  const handleLearnMore = (e, props) => {\n    // console.log(e.currentTarget)\n    // console.log(props)\n    jamCalls.findUsersWhoFavoritedJam(props.id).then((data) => {\n      // console.log(data)\n      // console.log(\"users who like jam\", data.usersWhoFavoriteJamId)\n      alert(\n        `Currently, ${data.usersWhoFavoriteJamId.length} musicians are attending this jam`\n      );\n    });\n  };\n\n  // ------------------------------------------------------\n  // Handle Pages of Jams\n  const [pageNumber, setPageNumber] = useState(0);\n\n  const handleNextPage = () => {\n    if (jamData.length < 4) {\n      alert(\"No more jams\");\n      return;\n    }\n    // console.log(\"Page number is \", pageNumber, \"currently. about to Increase by 4\")\n    setPageNumber(pageNumber + 4);\n  };\n\n  const handlePreviousPage = () => {\n    if (pageNumber === 0) {\n      alert(\"No previous jams\");\n      return;\n    }\n    // console.log(\"Page number is \", pageNumber, \"currently. about to Increase by 4\")\n    setPageNumber(pageNumber - 4);\n  };\n\n  useEffect(() => {\n    // console.log(\"page increase\")\n\n    // if display favorites is true adjust a new state for\n    // Favorites Page number and implementpagination\n    jamCalls.getAllJams(pageNumber).then((data) => {\n      setJams(data.allJams);\n    });\n  }, [pageNumber]);\n\n  return (\n    <div>\n      {/* APP BAR AND BUTTONS BELOW  */}\n      <PrimarySearchAppBar\n        handleJamSearch={handleJamSearch}\n      ></PrimarySearchAppBar>\n      <SideMenu\n        displayFavorites={displayFavorites}\n        handlePreviousPage={handlePreviousPage}\n        handleNextPage={handleNextPage}\n        handleShowFavorites={handleShowFavorites}\n        togglePostModal={togglePostModal}\n        handlePost={handlePost}\n      />\n      {/* ------------------------------------------------------------ */}\n      <InfoHeader\n        pageNumber={pageNumber}\n        displayFavoritesStatus={displayFavorites}\n      />\n      {/* POST NEW JAM MODAL */}\n      <Modal\n        open={open}\n        onClose={togglePostModal}\n        className={classes.modal}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>{body}</Fade>\n      </Modal>\n      {/* LEARN MORE MODAL */}\n\n      {/* CONTAINER OF AVALIABLE JAMS */}\n\n      <JamContainer\n        handleLearnMore={handleLearnMore}\n        handleDeleteJam={handleDeleteJam}\n        loggedInUserId={loggedInUserId}\n        displayFavorites={displayFavorites}\n        userFavoriteJams={userFavoriteJams}\n        postFavoriteJam={postFavoriteJam}\n        jamData={jamData}\n        filteredJams={filteredJams}\n      />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Jam.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/JamContainer.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/PrimaryBar.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/SideMenu.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignUp.js",["93"],"import React, { useRef } from 'react';\nimport { useAuth } from \"../../Hooks/use-auth\";\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport avatar from '../../assets/img/avatar.webp'\nimport jamCalls from \"../../utils/jamAPI\"\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    width: \"100%\",\n    minHeight: '100vh',\n  },\n  loginBox: {\n   width: \"320px\",\n   minHeight: \"420px\",\n   background: \"#fff\",\n   color: \"#000\",\n   top: \"50%\",\n   left: \"50%\",\n   position: \"absolute\",\n   transform: \"translate(-50%, -50%)\",\n   boxSizing: \"border-box\",\n   padding: \"70px 30px\",\n   borderRadius: \"20px\"\n  },\n  avatar: {\n    width: \"100px\",\n    height: \"100px\",\n    borderRadius: \"40%\",\n    position: \"absolute\",\n    top: \"-50px\",\n    left: \"calc(50% - 50px)\",\n  },\n  h1: {\n      margin: \"0\",\n      padding: \"0 0 20px\",\n      textAlign: \"center\",\n      fontSize: \"22px\",\n      fontStyle: \"bold\"\n  },\n  loginBoxP: {\n      margin: \"0\",\n      padding: \"0\",\n      fontWeight: \"bold\",\n  },\n  loginBoxInputText: {\n      width: \"100%\",\n      marginBottom: \"20px\",\n      border: \"none\",\n      borderBottom: \"1px solid #000\",\n      background: \"transparent\",\n      outline: \"none\",\n      height: \"35px\",\n      color: \"#000\",\n      fontSize: \"16px\"\n  },\n  loginBoxInputSubmit: {\n    width: \"100%\",\n    marginBottom: \"20px\",\n    margin: \"0\",\n    padding: \"0\",\n    border: \"none\",\n    outline: \"none\",\n    height: \"40px\",\n    background: \"#0e0c1d\",\n    color: \"#fff\",\n    fontSize: \"18px\",\n    borderRadius: \"20px\",\n    fontStyle: \"none\",\n    \"&:hover\": {\n        cursor: 'pointer',\n        background: \"#343078\"\n      }\n    },\n    loginBoxA: {\n        textDecoration: \"none\",\n        fontSize: \"14px\",\n        lineHeight: \"20px\",\n        color: \"#0D0C1D\"\n    }\n\n}));\n\n\nexport default function SignUp(props) {\n  const classes = useStyles();\n  const auth = useAuth();\n  const signUpEmailInput = useRef(null);\n  const signUpPasswordInput = useRef(null);\n  const signUpConfirmPasswordInput = useRef(null);\n  \n  const handleSubmit = async (e) => {\n    if(signUpPasswordInput.current.value !== signUpConfirmPasswordInput.current.value){\n      alert(\"Passwords do not match\")\n      signUpConfirmPasswordInput.current.focus();\n      return\n    }\n    let password = signUpPasswordInput.current.value\n    let user = await auth.signup(signUpEmailInput.current.value, password)\n    jamCalls.postUser({\"email\": user.email, \"firebase\": user.uid})\n    .then(() => {\n      console.log(\"posted\")\n    })\n  }\n\n  return (\n    <div className={classes.body}>\n       <div className={classes.loginBox}>\n           <img className={classes.avatar} src={avatar}></img>\n           <h1 className={classes.h1}>Sign Up Here</h1>\n           <p className={classes.loginBoxP}>Email</p>\n           <input className={classes.loginBoxInputText} type=\"text\" ref={signUpEmailInput} name=\"\" placeholder=\"Enter Email\"></input>\n           <p className={classes.loginBoxP}>Password</p>\n           <input className={classes.loginBoxInputText} type=\"password\" name=\"\" ref={signUpPasswordInput} placeholder=\"Enter Password\"></input>\n           <p className={classes.loginBoxP}>Confirm Password</p>\n           <input className={classes.loginBoxInputText} type=\"password\" name=\"\" ref={signUpConfirmPasswordInput} placeholder=\"Enter Password\"></input>\n\n           <Button className={classes.loginBoxInputSubmit} onClick={handleSubmit} type=\"submit\" name=\"\" >Login</Button><br></br>\n           <Link  className={classes.loginBoxA} to=\"/signin\"><p variant=\"contained\" className={classes.loginBoxA}> Already have an account?</p></Link>\n           <Link  className={classes.loginBoxA} to=\"/about\"><p variant=\"contained\" className={classes.loginBoxA}> FAQ</p></Link>\n\n       </div>\n    </div>\n    \n  )\n\n}\n\n\n","/Users/thegoods/Development/jamUpReact/jamup/src/Hooks/use-auth.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/utils/jamAPI.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/infoHeader.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/profile.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Profile.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/Landing.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignIn.js",["94","95"],"import React, { useRef } from 'react';\nimport { useAuth } from \"../../Hooks/use-auth\";\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport avatar from '../../assets/img/avatar.webp'\n\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    width: \"100%\",\n    minHeight: '100vh',\n  },\n  loginBox: {\n   width: \"320px\",\n   minHeight: \"420px\",\n   background: \"#fff\",\n   color: \"#000\",\n   top: \"50%\",\n   left: \"50%\",\n   position: \"absolute\",\n   transform: \"translate(-50%, -50%)\",\n   boxSizing: \"border-box\",\n   padding: \"70px 30px\",\n   borderRadius: \"20px\"\n  },\n  avatar: {\n    width: \"100px\",\n    height: \"100px\",\n    borderRadius: \"40%\",\n    position: \"absolute\",\n    top: \"-50px\",\n    left: \"calc(50% - 50px)\",\n  },\n  h1: {\n      margin: \"0\",\n      padding: \"0 0 20px\",\n      textAlign: \"center\",\n      fontSize: \"22px\",\n      fontStyle: \"bold\"\n  },\n  loginBoxP: {\n      margin: \"0\",\n      padding: \"0\",\n      fontWeight: \"bold\",\n  },\n  loginBoxInputText: {\n      width: \"100%\",\n      marginBottom: \"20px\",\n      border: \"none\",\n      borderBottom: \"1px solid #000\",\n      background: \"transparent\",\n      outline: \"none\",\n      height: \"35px\",\n      color: \"#000\",\n      fontSize: \"16px\"\n  },\n  loginBoxInputSubmit: {\n    width: \"100%\",\n    marginBottom: \"20px\",\n    margin: \"0\",\n    padding: \"0\",\n    border: \"none\",\n    outline: \"none\",\n    height: \"40px\",\n    background: \"#0e0c1d\",\n    color: \"#fff\",\n    fontSize: \"18px\",\n    borderRadius: \"20px\",\n    fontStyle: \"none\",\n    \"&:hover\": {\n        cursor: 'pointer',\n        background: \"#343078\"\n      }\n    },\n    loginBoxA: {\n        textDecoration: \"none\",\n        fontSize: \"14px\",\n        lineHeight: \"20px\",\n        color: \"#0D0C1D\"\n    }\n\n}));\n\n\nexport default function SignIn(props) {\n  const classes = useStyles();\n  const auth = useAuth()\n  const signInEmailInput = useRef(null);\n  const signInPasswordInput = useRef(null);\n\n  const handleSubmit = async () => {\n    let newUser = await auth.signin(signInEmailInput.current.value, signInPasswordInput.current.value)\n  }\n  return (\n    <div className={classes.body}>\n       <div className={classes.loginBox}>\n           <img className={classes.avatar} src={avatar}></img>\n           <h1 className={classes.h1}>Login Here</h1>\n           <p className={classes.loginBoxP}>Email</p>\n           <input className={classes.loginBoxInputText} type=\"text\" ref={signInEmailInput} name=\"\" placeholder=\"Enter Email\"></input>\n           <p className={classes.loginBoxP}>Password</p>\n           <input className={classes.loginBoxInputText} type=\"password\" name=\"\" ref={signInPasswordInput} placeholder=\"Enter Password\"></input>\n           \n           <Button className={classes.loginBoxInputSubmit} onClick={handleSubmit} type=\"submit\" name=\"\" >Login</Button><br></br>\n           <Link  className={classes.loginBoxA} to=\"/signup\"><p variant=\"contained\" className={classes.loginBoxA}> Dont have an account?</p></Link>\n           <Link  className={classes.loginBoxA} to=\"/about\"><p variant=\"contained\" className={classes.loginBoxA}> Lost password?</p></Link>\n\n       </div>\n    </div>\n    \n  )\n\n}\n\n\n","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/FAQ.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/assets/FAQ/FAQuestions.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/FAQPage.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":37,"column":13,"nodeType":"102","endLine":64,"endColumn":4},{"ruleId":"100","severity":1,"message":"103","line":64,"column":6,"nodeType":"104","endLine":64,"endColumn":8,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":106,"column":6,"nodeType":"104","endLine":106,"endColumn":18,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"108","line":124,"column":6,"nodeType":"104","endLine":124,"endColumn":17,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":110,"column":12,"nodeType":"112","endLine":110,"endColumn":57},{"ruleId":"113","severity":1,"message":"114","line":93,"column":9,"nodeType":"115","messageId":"116","endLine":93,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":98,"column":12,"nodeType":"112","endLine":98,"endColumn":57},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has a missing dependency: 'jamsToSearch'. Either include it or remove the dependency array.",["120"],"React Hook useEffect has a missing dependency: 'jamData'. Either include it or remove the dependency array. You can also do a functional update 'setJams(j => ...)' if you only need 'jamData' in the 'setJams' call.",["121"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'newUser' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [auth]",{"range":"128","text":"129"},"Update the dependencies array to be: [jamsToSearch, searchTerm]",{"range":"130","text":"131"},"Update the dependencies array to be: [jamData, postedJam]",{"range":"132","text":"133"},[1887,1889],"[auth]",[3272,3284],"[jamsToSearch, searchTerm]",[3852,3863],"[jamData, postedJam]"]