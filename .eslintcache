[{"/Users/thegoods/Development/jamUpReact/jamup/src/index.js":"1","/Users/thegoods/Development/jamUpReact/jamup/src/App.js":"2","/Users/thegoods/Development/jamUpReact/jamup/src/global.js":"3","/Users/thegoods/Development/jamUpReact/jamup/src/theme.js":"4","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Dashboard.js":"5","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Jam.js":"6","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/JamContainer.js":"7","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/PrimaryBar.js":"8","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/SideMenu.js":"9","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignUp.js":"10","/Users/thegoods/Development/jamUpReact/jamup/src/Hooks/use-auth.js":"11","/Users/thegoods/Development/jamUpReact/jamup/src/utils/jamAPI.js":"12","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/infoHeader.js":"13","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/profile.js":"14","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Profile.js":"15","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/About.js":"16","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/Landing.js":"17","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignIn.js":"18"},{"size":426,"mtime":1612238048410,"results":"19","hashOfConfig":"20"},{"size":1605,"mtime":1615394277080,"results":"21","hashOfConfig":"20"},{"size":658,"mtime":1615171427245,"results":"22","hashOfConfig":"20"},{"size":133,"mtime":1611507660777,"results":"23","hashOfConfig":"20"},{"size":11866,"mtime":1614832038599,"results":"24","hashOfConfig":"20"},{"size":2370,"mtime":1614560750086,"results":"25","hashOfConfig":"20"},{"size":2635,"mtime":1614796490236,"results":"26","hashOfConfig":"20"},{"size":5992,"mtime":1613681260295,"results":"27","hashOfConfig":"20"},{"size":2158,"mtime":1613679603328,"results":"28","hashOfConfig":"20"},{"size":2048,"mtime":1615228309867,"results":"29","hashOfConfig":"20"},{"size":2857,"mtime":1612236248932,"results":"30","hashOfConfig":"20"},{"size":3578,"mtime":1615394898474,"results":"31","hashOfConfig":"20"},{"size":1636,"mtime":1613679644760,"results":"32","hashOfConfig":"20"},{"size":152,"mtime":1613196540041,"results":"33","hashOfConfig":"20"},{"size":152,"mtime":1613196540041,"results":"34","hashOfConfig":"20"},{"size":4890,"mtime":1615228838950,"results":"35","hashOfConfig":"20"},{"size":4869,"mtime":1615243603293,"results":"36","hashOfConfig":"20"},{"size":3195,"mtime":1615394177012,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"l4gjh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},"/Users/thegoods/Development/jamUpReact/jamup/src/index.js",[],["79","80"],"/Users/thegoods/Development/jamUpReact/jamup/src/App.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/global.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/theme.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Dashboard.js",["81","82","83","84"],"import React, { useState, useEffect, useRef } from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport InfoHeader from './infoHeader'\nimport PrimarySearchAppBar from './PrimaryBar'\nimport JamContainer from './JamContainer'\nimport SideMenu from './SideMenu'\nimport { useAuth } from \"../../Hooks/use-auth\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport jamCalls from '../../utils/jamAPI'\n\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    color: \"black\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n}));\n\nconst Dashboard = (props) => {\n    const auth = useAuth();\n    const classes = useStyles();\n    const [loggedInUserId, setUserId] = useState(null)\n\n  // load in all jams on page\n  const [jamData, setJams] = useState(\"\");\n    useEffect( async () => {\n\n      async function fetchData() {\n        // await for DB to process\n        await timeout(3000);\n        // console.log(auth.user)\n          jamCalls.getUserByUid(auth.user.uid)\n          .then((data) => {\n            // console.log(\"HERE\", data)\n            if(data.msg){\n              auth.signout()\n              return\n            }\n            // console.log(loggedInUserId)\n            setUserId(data.userInfo[0].id)\n            jamCalls.findUserFavoriteJams(data.userInfo[0].id)\n            .then((userFavoriteJamData) => {\n              // console.log(\"HERE\", userFavoriteJamData)\n            setUserFavoriteJams(userFavoriteJamData.userFavoriteJams)\n  \n          })\n        })\n      }\n\n      fetchData()\n\n     \n      jamCalls.getAllJams()\n      .then(data => {\n        setJams(data.allJams)\n      })\n\n\n     \n    }, []);\n\n    function timeout(delay) {\n      return new Promise( res => setTimeout(res, delay) );\n  }\n\n\n// --------------------------------------------------\n// FILTER JAMS KEYWORDS (SEARCH)\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredJams, setFilteredJams] = useState(\"\");\n  const [jamsToSearch, setJamsToSearch] = useState(\"\");\n    // refactor to use DB\n    useEffect(() => {\n      // if the search term does not exist grab the jams by page via get all jams\n      // set the two states involving search to false so that correct data renders\n      // and return\n      if(!searchTerm) {\n          jamCalls.getAllJams()\n          .then(data => {\n          setJamsToSearch(false)\n          setFilteredJams(false)\n          setJams(data.allJams)\n          return\n        })\n      } else {\n        // otherwise grab all the grabs from the db and set to state\n        // jams to search\n        jamCalls.getAllJamsForSearch()\n        .then(data => {\n          setJamsToSearch(data.allJams)\n\n        });\n\n      // if this state has been populated there is a current search term\n      if(jamsToSearch){\n        // filter results\n        const results = jamsToSearch.filter(jam =>\n          jam.title.toLowerCase().includes(searchTerm)\n        );\n        setFilteredJams(results);\n        // the existence of this ^ state will trigger a rendering of different data in the \n        // jam container\n      }\n  \n      } \n\n    }, [searchTerm]);\n  \n    // this runs onchange in search filtering jams\n    const handleJamSearch = (e) => {\n      setSearchTerm(e.target.value);\n    }\n\n\n\n// -------------------------------------------------------------\n// POST NEW JAM\n    // --------------------------------------------------\n    // state and useEffect for when posting new jam\n    const [postedJam, setJam] = useState('')\n    useEffect(() => {\n    // if posted jam changes repopulate state with all previous + new   \n        if(postedJam){\n          // console.log('newjam', postedJam)\n          setJams([postedJam, ...jamData])\n        }\n        \n      }, [postedJam]);\n\n\n      const handlePost = (e) => {\n        // console.log(e)\n        // data from new jam form\n        // post to server\n        if(!jamDate.current.value || !jamTime.current.value) {\n          alert(\"Jams must have a date and time\")\n          return\n        }\n        // console.log(loggedInUserId)\n        let newJam = {\n          title: jamTitleInput.current.value,\n          genre: jamGenreInput.current.value,\n          info: jamInfoInput.current.value,\n          jamDate: jamDate.current.value,\n          jamTime: jamTime.current.value,\n          location: jamLocation.current.value,\n          userId: loggedInUserId\n        }\n\n     \n        \n        \n          jamCalls.postJam(newJam)\n          .then((data) => {\n            // console.log(data)\n            // changing jamDate to hold utc so correct time is displayed immediately after post\n            const d = new Date(newJam.jamDate + \"T\" + newJam.jamTime);\n            const newUtcDate = d.toUTCString();\n            newJam.jamDate = newUtcDate\n            // grab new jam id and append it to the jam about to be posted to state\n            newJam.id = data.createdJamId\n             // set new jam state\n            setJam(newJam)\n            // turn off modal\n            togglePostModal()\n          })\n    \n        }\n    \n\n        // state for post new jam via modal\n        const [open, setOpen] = useState(false);\n\n        // modal open and close functions\n        const togglePostModal = () => {\n          setOpen(!open);\n        };\n        \n\n        // add new refs for new inputs time date location\n        const jamTitleInput = useRef(null);\n        const jamGenreInput = useRef(null);\n        const jamInfoInput = useRef(null);\n        const jamTime = useRef(null);\n        const jamDate = useRef(null);\n        const jamLocation = useRef(null);\n        // html for  post modal\n        const body = (\n          <div className={classes.paper}>\n            <h2 id=\"simple-modal-title\">Create a New Jam</h2>\n            <input ref={jamTitleInput} placeholder=\"Jam Title\"/>\n            <input ref={jamInfoInput} placeholder=\"Info\"/>\n            <input ref={jamGenreInput} placeholder=\"Genre\"/>\n            <input ref={jamTime}type=\"time\"/>\n            <input ref={jamDate}type=\"date\"/>\n            <input ref={jamLocation} placeholder=\"Location\"></input>\n            <button onClick={(e) => handlePost(e)}>Create Jam</button>\n          </div>\n        );\n\n\n\n\n\n// ----------------------------------------------------------\n// POST/TOGGLE FAVORITE JAM\n\n            const postFavoriteJam = (e) => {\n              let likedJamId = e.currentTarget.dataset.jamid\n              // console.log(e.currentTarget)\n              // console.log(e.currentTarget.dataset.jamid)\n              // console.log(loggedInUserId)\n              jamCalls.postFavoriteJam(likedJamId, loggedInUserId).then((data) => {\n                console.log(data)\n                setUserFavoriteJams(data.userFavoriteJams)\n                alert(data.msg)\n\n              }) \n            }\n\n\n// --------------------------------------------------------------\n// Delete User's Jam\n\n            const handleDeleteJam = (e) => {\n              // console.log(e.currentTarget)\n              let jamIdToDelete = e.currentTarget.dataset.jamid\n              // console.log(jamIdToDelete)\n              let answer = window.confirm(\"Are you sure you want to delete this jam?\")\n              if (answer) {\n                jamCalls.deleteJamById(jamIdToDelete, loggedInUserId, pageNumber)\n                .then(data => {\n                  // console.log(data)\n                  setJams(data.allJams)\n                })\n                \n              } else {\n                return\n              }\n\n            }\n\n// --------------------------------------------------------------\n// FILTER FOR USERS FAVORITES\n            const [displayFavorites, toggleDisplayFavorites] = useState(false)\n            const [userFavoriteJams, setUserFavoriteJams] = useState([])\n            useEffect(() => {\n              // console.log(\"User Favorite Jams: \",userFavoriteJams)\n            }, [userFavoriteJams])\n\n            const handleShowFavorites = async () => {\n              toggleDisplayFavorites(!displayFavorites)\n              let data = await jamCalls.findUserFavoriteJams(loggedInUserId)\n             \n                // console.log(data, displayFavorites)\n                setUserFavoriteJams(data.userFavoriteJams)\n\n                \n            }\n\n            useEffect(() => {\n              // console.log(displayFavorites)\n              // console.log(userFavoriteJams)\n            }, [displayFavorites]);\n\n\n// ---------------------------------------------------\n// Handle Learn More Modal\n// modal to come\n       \n        const handleLearnMore = (e, props) => {\n          // console.log(e.currentTarget)\n          // console.log(props)\n          jamCalls.findUsersWhoFavoritedJam(props.id)\n          .then((data) => {\n            // console.log(data)\n            // console.log(\"users who like jam\", data.usersWhoFavoriteJamId)\n            alert(`Currently, ${data.usersWhoFavoriteJamId.length} musicians are attending this jam`)\n            \n          })\n        }\n\n\n// ------------------------------------------------------\n// Handle Pages of Jams\n        const [pageNumber, setPageNumber] = useState(0)\n\n        const handleNextPage = () => {\n          if(jamData.length < 4) {\n            alert(\"No more jams\")\n            return\n          }\n          // console.log(\"Page number is \", pageNumber, \"currently. about to Increase by 4\")\n          setPageNumber(pageNumber + 4)\n        }\n\n        const handlePreviousPage = () => {\n          if(pageNumber === 0){\n            alert(\"No previous jams\")\n            return\n          }\n          // console.log(\"Page number is \", pageNumber, \"currently. about to Increase by 4\")\n          setPageNumber(pageNumber - 4)\n        }\n\n        useEffect(() => {\n          // console.log(\"page increase\")\n\n          // if display favorites is true adjust a new state for \n          // Favorites Page number and implementpagination\n          jamCalls.getAllJams(pageNumber)\n          .then(data => {\n            setJams(data.allJams)\n          })\n        }, [pageNumber])\n\n       \n\n    return (\n        <div>\n            {/* APP BAR AND BUTTONS BELOW  */}\n            <PrimarySearchAppBar handleJamSearch={handleJamSearch}></PrimarySearchAppBar>\n            <SideMenu displayFavorites={displayFavorites} handlePreviousPage={handlePreviousPage} handleNextPage={handleNextPage} handleShowFavorites={handleShowFavorites} togglePostModal={togglePostModal} handlePost={handlePost}/>\n            {/* ------------------------------------------------------------ */}\n            <InfoHeader pageNumber={pageNumber} displayFavoritesStatus={displayFavorites}/>\n            {/* POST NEW JAM MODAL */}\n            <Modal\n              open={open}\n              onClose={togglePostModal}\n              className={classes.modal}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                {body}\n              </Fade>\n            \n            </Modal>\n            {/* LEARN MORE MODAL */}\n            \n            {/* CONTAINER OF AVALIABLE JAMS */}\n            \n            <JamContainer handleLearnMore={handleLearnMore} handleDeleteJam={handleDeleteJam} loggedInUserId={loggedInUserId} displayFavorites={displayFavorites} userFavoriteJams={userFavoriteJams} postFavoriteJam={postFavoriteJam} jamData={jamData} filteredJams={filteredJams}/>\n        </div>\n      \n    )\n   \n    \n    \n};\n\n\nexport default Dashboard;","/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Jam.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/JamContainer.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/PrimaryBar.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/SideMenu.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignUp.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/Hooks/use-auth.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/utils/jamAPI.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/infoHeader.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/profile.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/private/Profile.js",[],"/Users/thegoods/Development/jamUpReact/jamup/src/components/public/About.js",["85","86"],"import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    width: \"50%\",\n    marginTop: '5%',\n    borderRadius: \"5px\"\n\n  },\n  link: {\n    width: \"50%\",\n    marginTop: '5%',\n    borderRadius: \"5px\"\n\n  },\n  submit: {\n    width: \"50%\",\n    marginTop: '5%',\n    borderRadius: \"5px\"\n\n  },\n  h1: {\n    width: \"50%\",\n    marginTop: '5%',\n    textAlign: 'center'\n\n  },\n  button: {\n    width: \"100%\",\n    marginTop: '5%'\n\n  },\n  outerDiv: {\n    marginLeft: '25%',\n    width: \"50%\",\n    alignContent: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  root: {\n    minWidth: \"80%\",\n    height: \"100%\",\n    margin: \"1%\"\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\n\nexport default function About(props) {\n  const classes = useStyles();\n\n  return (\n    \n        <div className={classes.outerDiv} >\n          <h1 className={classes.h1} > About Us</h1>\n          <Card className={classes.root} variant=\"outlined\">\n            <CardContent>\n                <Typography variant=\"h5\" className={classes.pos} color=\"textSecondary\">\n                Welcome to JamUp!\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                - Our goal is to connect musicians online by cordinating meeting times on various applications so we can all practice remotely.\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                - Jams are stored in UTC time and converted to your local time for everyone's convenience.\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\" >\n                - Currently our favorite application for online jamming is called <a target=\"_blank\" href=\"https://jamulus.io/\">Jamulus</a>\n                </Typography>\n            </CardContent>\n            <CardActions>\n               \n            </CardActions>\n         </Card>\n          <Card className={classes.root} variant=\"outlined\">\n            <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                Genre: Example Genre\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    Title: Example Jam\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                Info: All instruments welcome! \n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                Location/Server: Server Name and Connection Details\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                🕰 Time: = Local Time\n                </Typography>\n            </CardContent>\n            <CardActions>\n               \n            </CardActions>\n         </Card>\n       \n         <Card className={classes.root} variant=\"outlined\">\n            <CardContent>\n                <Typography variant=\"h5\" className={classes.pos} color=\"textSecondary\">\n                Creating a Jam\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n               - When creating a jam, providing the correct CONNECTION DETAILS are very important for jams to actually happen!\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                - When using Jamulus make sure to include the SERVER NAME, LIST GENRE, and TIME. If you are using another application for jamming, list it and the necessary connection details.\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                - Make sure to sign up for jams you create to tell others you are also attending : )\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                - JamUp is an ongoing project. We look forward to improving upon ther initial design. If you are interested in helping us grow, join us in our <a target=\"_blank\" href=\"https://discord.gg/xhPZPNYzSJ\">Discord</a>\n                </Typography>\n            </CardContent>\n            <CardActions>\n               \n            </CardActions>\n         </Card>\n\n\n          <Link  className={classes.link} to=\"/dashboard\"><Button variant=\"contained\" className={classes.button}> Back</Button></Link>\n    \n\n        </div>\n    \n  )\n\n}\n\n\n","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/Landing.js",["87","88","89","90","91","92","93"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport banjo from \"../../assets/img/banjo.png\"\nimport appExample from \"../../assets/img/appExample.png\"\nimport jamulus from \"../../assets/img/jamulus.png\"\nimport discord from \"../../assets/img/discord.png\"\nimport bluegrass from \"../../assets/img/bluegrass_band.png\"\nimport facebook from \"../../assets/img/facebook.png\"\n\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    width: \"100%\",\n    height: '100%',\n  },\n  section: {\n    position: \"relative\",\n    width: '100%',\n    minHeight: '100vh',\n    padding: \"100px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    transition: \"0.5s\"\n  },\n  header: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      padding: \"20px 100px\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n  },\n  logo: {\n      position: \"relative\",\n      maxWidth: \"80px\",\n  },\n  headerUl: {\n      position: \"relative\",\n      display: \"flex\",\n\n  },\n  headerUlLi: {\n    listStyle: \"none\"\n  },\n  headerUlLiA: {\n    display: \"inline-block\",\n    fontWeight: \"400px\",\n    marginLeft: \"40px\",\n    textDecoration: \"none\",\n  },\n  content: {\n    position: \"relative\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  \n  textBox: {\n    position: \"relative\",\n    maxWidth: \"600px\",\n  },\n  textBoxH2: {\n    fontSize: \"2em\",\n    lineHeight: \"1.5em\",\n    fontWeight: \"900\",\n    textTransform: \"uppercase\"\n  },\n  textBoxH2Span: {\n    fontSize: \"2em\"\n  },\n  textBoxA: {\n    display: \"inline-block\",\n    marginTop: \"20px\",\n    padding: \"8px 20px\",\n    background: \"#fff\",\n    color: \"#111\",\n    borderRadius: \"40px;\",\n    fontWeight: \"500\",\n    letterSpacing: \"1px\",\n    textDecoration: \"none\",\n    textTransform: \"uppercase\",\n\n    \n  },\n  imgBox: {\n    width: \"600px\",\n    display: \"flex\",\n    paddingRight: \"50px\",\n    justifyContent: \"flex-end\"\n  },\n  appExample: {\n    maxWidth: \"260px\",\n    filter: \"invert(1)\",\n    margin: \"10%\",\n    userDrag: \"none\"\n  },\n  sci: {\n    position: \"absolute\",\n    top: \"50%\",\n    right: \"5px\",\n    transform: \"translateY(-50%)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n  sciLi: {\n      listStyle: \"none\"\n  },\n  sciLiA: {\n      display: \"inline-block\",\n      margin: \"5px 0px \",\n      transform: \"scale(0.6)\"\n  },\n  sciImage: {\n      maxWidth: \"100px\",\n      userDrag: \"none\"\n    \n  }\n\n}));\n\n\nexport default function Landing(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.body}>\n        <section className={classes.section}> \n            <header className={classes.header}>\n                <a href=\"#\"><img alt=\"jamUp logo\" className={classes.logo} src={banjo}></img></a>\n                <ul className={classes.headerUl}>\n                    <li className={classes.headerUlLi} ><Link to=\"/about\" className={classes.headerUlLiA}>About</Link></li>\n                    <li className={classes.headerUlLi}><Link to=\"/signin\" className={classes.headerUlLiA}>SignIn</Link></li>\n                    <li className={classes.headerUlLi}><Link to=\"/signup\" className={classes.headerUlLiA}>SignUp</Link></li>\n                </ul>\n            </header>\n\n            <div className={classes.content}>\n                <div className={classes.textBox}>\n                    <h2 className={classes.textBoxH2}>Find Jams <br></br> <span className={classes.textBoxH2Span}>Play Online</span> </h2>\n                    <p>Join an ongoing jam of your favorite genre or create your own!</p>    \n                        <Link to=\"/signin\" className={classes.textBoxA} href=\"#\"> Start Jamming</Link>\n                </div>\n                \n                <div className={classes.imgBox}>\n                        <img alt=\"image of jamUp interface\" className={classes.appExample} src={bluegrass}></img>\n                </div>\n                \n            </div>\n\n            <ul className={classes.sci}>\n                <li className={classes.sciLi}><a target=\"_blank\" href=\"https://jamulus.io/\" className={classes.sciLiA}><img alt=\"link to jamulus application website\" className={classes.sciImage} src={jamulus}></img></a></li>\n                <li className={classes.sciLi}><a target=\"_blank\" href=\"https://discord.gg/xhPZPNYzSJ\" className={classes.sciLiA}><img alt=\"link to jamUp discord server\" className={classes.sciImage} src={discord} ></img></a></li>\n                <li className={classes.sciLi}><a target=\"#\" className={classes.sciLiA}><img alt=\"link to jamUp facebook\" className={classes.sciImage} src={facebook}></img></a></li>\n            </ul>\n        </section>  \n\n    </div>\n    \n  )\n\n}\n\n\n","/Users/thegoods/Development/jamUpReact/jamup/src/components/public/SignIn.js",["94","95"],"import React, { useRef } from 'react';\nimport { useAuth } from \"../../Hooks/use-auth\";\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport avatar from '../../assets/img/avatar.webp'\n\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    width: \"100%\",\n    minHeight: '100vh',\n  },\n  loginBox: {\n   width: \"320px\",\n   minHeight: \"420px\",\n   background: \"#fff\",\n   color: \"#000\",\n   top: \"50%\",\n   left: \"50%\",\n   position: \"absolute\",\n   transform: \"translate(-50%, -50%)\",\n   boxSizing: \"border-box\",\n   padding: \"70px 30px\",\n   borderRadius: \"20px\"\n  },\n  avatar: {\n    width: \"100px\",\n    height: \"100px\",\n    borderRadius: \"40%\",\n    position: \"absolute\",\n    top: \"-50px\",\n    left: \"calc(50% - 50px)\",\n  },\n  h1: {\n      margin: \"0\",\n      padding: \"0 0 20px\",\n      textAlign: \"center\",\n      fontSize: \"22px\",\n      fontStyle: \"bold\"\n  },\n  loginBoxP: {\n      margin: \"0\",\n      padding: \"0\",\n      fontWeight: \"bold\",\n  },\n  loginBoxInputText: {\n      width: \"100%\",\n      marginBottom: \"20px\",\n      border: \"none\",\n      borderBottom: \"1px solid #000\",\n      background: \"transparent\",\n      outline: \"none\",\n      height: \"35px\",\n      color: \"#000\",\n      fontSize: \"16px\"\n  },\n  loginBoxInputSubmit: {\n    width: \"100%\",\n    marginBottom: \"20px\",\n    margin: \"0\",\n    padding: \"0\",\n    border: \"none\",\n    outline: \"none\",\n    height: \"40px\",\n    background: \"#0e0c1d\",\n    color: \"#fff\",\n    fontSize: \"18px\",\n    borderRadius: \"20px\",\n    fontStyle: \"none\",\n    \"&:hover\": {\n        cursor: 'pointer',\n        background: \"#343078\"\n      }\n    },\n    loginBoxA: {\n        textDecoration: \"none\",\n        fontSize: \"14px\",\n        lineHeight: \"20px\",\n        color: \"#0D0C1D\"\n    }\n\n}));\n\n\nexport default function SignIn(props) {\n  const classes = useStyles();\n  const auth = useAuth()\n  const signInEmailInput = useRef(null);\n  const signInPasswordInput = useRef(null);\n\n  const handleSubmit = async () => {\n    let newUser = await auth.signin(signInEmailInput.current.value, signInPasswordInput.current.value)\n  }\n  return (\n    <div className={classes.body}>\n       <div className={classes.loginBox}>\n           <img className={classes.avatar} src={avatar}></img>\n           <h1 className={classes.h1}>Login Here</h1>\n           <p className={classes.loginBoxP}>Email</p>\n           <input className={classes.loginBoxInputText} type=\"text\" ref={signInEmailInput} name=\"\" placeholder=\"Enter Email\"></input>\n           <p className={classes.loginBoxP}>Password</p>\n           <input className={classes.loginBoxInputText} type=\"password\" name=\"\" ref={signInPasswordInput} placeholder=\"Enter Password\"></input>\n           \n           <Button className={classes.loginBoxInputSubmit} onClick={handleSubmit} type=\"submit\" name=\"\" >Login</Button><br></br>\n           <Link  className={classes.loginBoxA} to=\"/signup\"><p variant=\"contained\" className={classes.loginBoxA}> Dont have an account?</p></Link>\n           <Link  className={classes.loginBoxA} to=\"/about\"><p variant=\"contained\" className={classes.loginBoxA}> Lost password?</p></Link>\n\n       </div>\n    </div>\n    \n  )\n\n}\n\n\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":38,"column":16,"nodeType":"102","endLine":72,"endColumn":6},{"ruleId":"100","severity":1,"message":"103","line":72,"column":8,"nodeType":"104","endLine":72,"endColumn":10,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":120,"column":8,"nodeType":"104","endLine":120,"endColumn":20,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"108","line":141,"column":10,"nodeType":"104","endLine":141,"endColumn":21,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":88,"column":83,"nodeType":"112","endLine":88,"endColumn":129},{"ruleId":"110","severity":1,"message":"111","line":133,"column":160,"nodeType":"112","endLine":133,"endColumn":216},{"ruleId":"113","severity":1,"message":"114","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":14},{"ruleId":"113","severity":1,"message":"117","line":6,"column":8,"nodeType":"115","messageId":"116","endLine":6,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":137,"column":17,"nodeType":"112","endLine":137,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":153,"column":25,"nodeType":"112","endLine":153,"endColumn":108},{"ruleId":"110","severity":1,"message":"111","line":159,"column":47,"nodeType":"112","endLine":159,"endColumn":120},{"ruleId":"110","severity":1,"message":"111","line":160,"column":47,"nodeType":"112","endLine":160,"endColumn":130},{"ruleId":"118","severity":1,"message":"122","line":161,"column":47,"nodeType":"112","endLine":161,"endColumn":88},{"ruleId":"113","severity":1,"message":"123","line":93,"column":9,"nodeType":"115","messageId":"116","endLine":93,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":98,"column":12,"nodeType":"112","endLine":98,"endColumn":57},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["128"],"React Hook useEffect has a missing dependency: 'jamsToSearch'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has a missing dependency: 'jamData'. Either include it or remove the dependency array. You can also do a functional update 'setJams(j => ...)' if you only need 'jamData' in the 'setJams' call.",["130"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'appExample' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'newUser' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [auth]",{"range":"137","text":"138"},"Update the dependencies array to be: [jamsToSearch, searchTerm]",{"range":"139","text":"140"},"Update the dependencies array to be: [jamData, postedJam]",{"range":"141","text":"142"},[1964,1966],"[auth]",[3404,3416],"[jamsToSearch, searchTerm]",[4027,4038],"[jamData, postedJam]"]